# AUTOGENERATED! DO NOT EDIT! File to edit: data.ipynb (unless otherwise specified).

__all__ = ['dir_data', 'dir_imgs', 'dir_colr', 'dir_gray', 'denorm', 'torch2np', 'rgb2gray', 'get_src', 'get_data']

# Cell
from fastai.vision import *

# Cell
dir_data = Path('/home/blaberj/justinblaber/deoldify/data')
dir_imgs = dir_data/'imgs'
dir_colr = dir_imgs/'colr'
dir_gray = dir_imgs/'gray'

# Cell
def denorm(img):
    sdev = torch.tensor([0.229, 0.224, 0.225], device=img.device, dtype=img.dtype)[None,:,None,None]
    mean = torch.tensor([0.485, 0.456, 0.406], device=img.device, dtype=img.dtype)[None,:,None,None]
    return img*sdev+mean

# Cell
def torch2np(img): return img.permute(0,2,3,1).detach().cpu().numpy()

# Cell
def rgb2gray(img):
    return 0.299*img[:,0,:,:]+0.587*img[:,1,:,:]+0.114*img[:,2,:,:] # Same as pillow L conversion

# Cell
def get_src(subset=None):
    iil = ImageImageList.from_folder(dir_gray)
    if subset is not None:
        iil = iil[:subset]
    return iil.split_by_rand_pct(0.1, seed=0)

# Cell
def get_data(src, batch_size, sz):
    data = (src.label_from_func(lambda x: dir_colr/x.name)
               .transform(get_transforms(max_zoom=2.), size=sz, tfm_y=True)
               .databunch(bs=batch_size)
               .normalize(imagenet_stats, do_y=True))
    data.c = 3
    return data